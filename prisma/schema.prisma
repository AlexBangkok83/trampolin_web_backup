generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String?
  stripeCustomerId String?        @unique
  roleId           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  csvUploads       CsvUpload[]
  refunds          Refund[]
  sessions         Session[]
  subscriptions    Subscription[]
  urlAnalyses      UrlAnalysis[]
  role             Role?          @relation(fields: [roleId], references: [id])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus
  priceId              String
  quantity             Int                @default(1)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  monthlyLimit         Int                @default(500)
  usedThisMonth        Int                @default(0)
  lastUsageReset       DateTime           @default(now())
  trialLimit           Int                @default(10)
  trialUsed            Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Refund {
  id                    String   @id @default(cuid())
  stripeRefundId        String   @unique
  stripeChargeId        String
  stripePaymentIntentId String
  amount                Int
  currency              String
  reason                String
  status                String
  adminUserId           String
  customerEmail         String
  adminNote             String?
  metadata              Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  admin                 User     @relation(fields: [adminUserId], references: [id])
}

model UrlAnalysis {
  id        String   @id @default(cuid())
  userId    String
  url       String
  status    String
  results   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CsvUpload {
  id           String          @id @default(cuid())
  userId       String
  filename     String
  originalName String
  fileSize     Int
  status       CsvUploadStatus @default(pending)
  totalRows    Int             @default(0)
  validRows    Int             @default(0)
  errorMessage String?
  headers      String[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  csvRows      CsvRow[]
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CsvRow {
  id        String    @id @default(cuid())
  uploadId  String
  rowIndex  Int
  data      Json
  createdAt DateTime  @default(now())
  upload    CsvUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId, rowIndex])
}

model ads {
  id                            String    @id @map("_id") @db.Uuid
  ad_id                         String?   @db.VarChar(255)
  ad_creation_time              DateTime? @db.Date
  ad_delivery_start_time        DateTime? @db.Timestamp(6)
  ad_delivery_stop_time         DateTime? @db.Timestamp(6)
  page_id                       String?   @db.VarChar(255)
  page_name                     String?
  target_gender                 String?   @db.VarChar(50)
  eu_total_reach                Int?
  snapshot_ad_creative_id       String?   @db.VarChar(255)
  snapshot_display_format       String?   @db.VarChar(50)
  snapshot_link_url             String?
  snapshot_creation_time        BigInt?
  snapshot_instagram_actor_name String?
  snapshot_page_like_count      Int?
  snapshot_page_profile_uri     String?
  snapshot_cta_type             String?   @db.VarChar(50)
  snapshot_additional_info      String?
  created_at                    DateTime? @default(now()) @db.Timestamptz(6)
  scraper_name                  String?   @default("new_ads_scraper") @db.VarChar(255)
  active                        Boolean?  @default(true)

  @@index([ad_delivery_stop_time], map: "idx_ad_delivery_stop_time")
  @@index([created_at], map: "idx_ads_created_at")
  @@index([id, created_at], map: "idx_ads_id_created_date")
  @@index([page_id], map: "idx_ads_page_id")
  @@index([page_id, created_at], map: "idx_ads_page_id_created_at")
  @@index([snapshot_ad_creative_id, created_at], map: "idx_ads_snapshot_ad_created_at")
  @@index([snapshot_link_url(ops: raw("gin_trgm_ops"))], map: "idx_ads_snapshot_link_url_trgm", type: Gin)
  @@index([scraper_name], map: "idx_scraper_name")
}

enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum CsvUploadStatus {
  pending
  processing
  completed
  failed
}
