// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////
// Auth & User Management
///////////////////////////////

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  passwordHash      String?

  roleId            String?
  role              Role?     @relation(fields: [roleId], references: [id])

  accounts          Account[]
  sessions          Session[]
  subscriptions     Subscription[]
  csvUploads        CsvUpload[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

///////////////////////////////
// NextAuth.js adapter models
///////////////////////////////

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

///////////////////////////////
// Subscriptions & Billing
///////////////////////////////

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  unpaid
}

model Subscription {
  id                   String              @id @default(cuid())
  userId               String
  stripeCustomerId     String              @unique
  stripeSubscriptionId String              @unique
  status               SubscriptionStatus
  priceId              String
  quantity             Int                 @default(1)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean             @default(false)
  canceledAt           DateTime?

  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

///////////////////////////////
// CSV Upload placeholder
///////////////////////////////

model CsvUpload {
  id         String   @id @default(cuid())
  userId     String
  filename   String
  status     String   // e.g., "pending", "processing", "completed", "failed"

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
